# 描述
# 计算一个浮点数的立方根，不使用库函数。
# 保留一位小数。

# 数据范围：val ≤20 

# 输入描述：
# 待求解参数，为double类型（一个实数）

# 输出描述：
# 输出参数的立方根。保留一位小数。
# 
# 输入：
# 19.9
# 输出：
# 2.7
# 示例2
# 输入：
# 2.7
# 输出：
# 1.4



# 牛顿迭代法求解立方根的思路：
# 令f(x) = x^3 - a，求解f(x) = x^3 - a = 0。
# 利用泰勒公式展开，即f(x)在x0处的函数值为：
# f(x) = f(x0) +f'(x0)(x-x0) = (x0^3-a) + (3x0^2)(x-x0) = 0，
# 解之得：x = x0 - (x0^3 - a) / (3x0^2)。
#     即 x = x - ((x*x*x - n) / (3*x*x));
 
# 拓展：求平方根用一个套路：
# 令f(x) = x^2 - a，求解f(x) = x^2 - a = 0。
# 利用泰勒公式展开，即f(x)在x0处的函数值为：
# f(x) = f(x0) +f'(x0)(x-x0) = (x0^2-a) + 2x0(x-x0) = 0，
# 解之得：x = x0 - (x0^2 - a) / 2x0
#     即 x = x - (x*x-a)/2x 可进一步化简为:=(x+a/x) / 2。
 
# 总结：
# 平方根与立方根的求解迭代公式：
# 新x = 旧x - f(x)/f'(x)
# 新x = 旧x - (x平方或者立方与输入数a的差)/f(x)求导数

def cube_root(n):
    """
    根据题目可知，数的绝对值小于20，那么2.7^3 约等于 19.68  2.8**3 约等于 21.95
    可以得出，立方根是一个绝对值小于等于 2.7 的一个小数
    """
    if n < 0:
        return - cube_root(-n)
    # 使用二分法
    left = 0
    right = 20
    while right - left > 0.05:
        mid = (left + right) / 2
        if mid**3 > n:
            right = mid
        elif mid**3 < n:
            left = mid
        else:
            return mid
    return left


if __name__ == '__main__':
    print(round(cube_root(19.9), 1))

